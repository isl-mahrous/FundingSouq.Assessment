// <auto-generated />
using System;
using FundingSouq.Assessment.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FundingSouq.Assessment.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240824120507_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("account_number");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_account_number");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_accounts_client_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_addresses_city_id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_addresses_client_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_addresses_country_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_cities_name");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhonePrefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("phone_prefix");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_name");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.HubPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.HasKey("Id")
                        .HasName("pk_hub_pages");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_hub_pages_key");

                    b.ToTable("hub_pages", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("HubPageId")
                        .HasColumnType("integer")
                        .HasColumnName("hub_page_id");

                    b.Property<int>("HubUserId")
                        .HasColumnType("integer")
                        .HasColumnName("hub_user_id");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("search_date");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("search_query");

                    b.HasKey("Id")
                        .HasName("pk_search_histories");

                    b.HasIndex("HubPageId")
                        .HasDatabaseName("ix_search_histories_hub_page_id");

                    b.HasIndex("HubUserId")
                        .HasDatabaseName("ix_search_histories_hub_user_id");

                    b.ToTable("search_histories", (string)null);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("citext")
                        .HasColumnName("email")
                        .UseCollation("en_US.utf8");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("UserType")
                        .HasDatabaseName("ix_users_user_type");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Client", b =>
                {
                    b.HasBaseType("FundingSouq.Assessment.Core.Entities.User");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("mobile_number");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("personal_id");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text")
                        .HasColumnName("profile_photo");

                    b.HasIndex("MobileNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_mobile_number");

                    b.HasIndex("PersonalId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_personal_id");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.HubUser", b =>
                {
                    b.HasBaseType("FundingSouq.Assessment.Core.Entities.User");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Account", b =>
                {
                    b.HasOne("FundingSouq.Assessment.Core.Entities.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Address", b =>
                {
                    b.HasOne("FundingSouq.Assessment.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_cities_city_id");

                    b.HasOne("FundingSouq.Assessment.Core.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_clients_client_id");

                    b.HasOne("FundingSouq.Assessment.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_countries_country_id");

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.City", b =>
                {
                    b.HasOne("FundingSouq.Assessment.Core.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.SearchHistory", b =>
                {
                    b.HasOne("FundingSouq.Assessment.Core.Entities.HubPage", "HubPage")
                        .WithMany("SearchHistory")
                        .HasForeignKey("HubPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_search_histories_hub_pages_hub_page_id");

                    b.HasOne("FundingSouq.Assessment.Core.Entities.HubUser", "HubUser")
                        .WithMany("SearchHistory")
                        .HasForeignKey("HubUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_search_histories_hub_users_hub_user_id");

                    b.Navigation("HubPage");

                    b.Navigation("HubUser");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.HubPage", b =>
                {
                    b.Navigation("SearchHistory");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.Client", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("FundingSouq.Assessment.Core.Entities.HubUser", b =>
                {
                    b.Navigation("SearchHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
